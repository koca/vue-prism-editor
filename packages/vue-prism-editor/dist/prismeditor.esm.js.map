{"version":3,"file":"prismeditor.esm.js","sources":["../src/Editor.ts"],"sourcesContent":["import Vue, { VNode } from 'vue';\r\n\r\nimport './styles.css';\r\nconst KEYCODE_ENTER = 13;\r\nconst KEYCODE_TAB = 9;\r\nconst KEYCODE_BACKSPACE = 8;\r\nconst KEYCODE_Y = 89;\r\nconst KEYCODE_Z = 90;\r\nconst KEYCODE_M = 77;\r\nconst KEYCODE_ESCAPE = 27;\r\n\r\nconst BRACKET_PAIRS: {[opening: string]: string} = {\r\n  '(':')',\r\n  '{':'}',\r\n  '[':']',\r\n  '\"':'\"',\r\n  \"'\":\"'\",\r\n};\r\n\r\nconst HISTORY_LIMIT = 100;\r\nconst HISTORY_TIME_GAP = 3000;\r\n\r\nconst isWindows = 'navigator' in global && /Win/i.test(navigator.platform);\r\nconst isMacLike = 'navigator' in global && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\nexport interface EditorProps {\r\n  lineNumbers: boolean;\r\n  autoStyleLineNumbers: boolean;\r\n  readonly: boolean;\r\n  value: string;\r\n  highlight: () => string;\r\n  tabSize: number;\r\n  insertSpaces: boolean;\r\n  ignoreTabKey: boolean;\r\n  placeholder: string;\r\n}\r\nexport interface Record {\r\n  value: string;\r\n  selectionStart: number;\r\n  selectionEnd: number;\r\n}\r\n\r\nexport interface History {\r\n  stack: Array<Record & { timestamp: number }>;\r\n  offset: number;\r\n}\r\ninterface AutocompleteEntry {\r\n  text: string\r\n  overlap: number\r\n  label?: string\r\n}\r\n\r\nexport const PrismEditor = Vue.extend({\r\n  props: {\r\n    lineNumbers: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    autoStyleLineNumbers: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    value: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    highlight: {\r\n      type: Function,\r\n      required: true,\r\n    },\r\n    tabSize: {\r\n      type: Number,\r\n      default: 2,\r\n    },\r\n    insertSpaces: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    ignoreTabKey: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    autocomplete: {\r\n      type: Function,\r\n      default() {\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      capture: true,\r\n      history: {\r\n        stack: [],\r\n        offset: -1,\r\n      } as History,\r\n      lineNumbersHeight: '20px',\r\n      codeData: '',\r\n\r\n      autocompleteOpen: false,\r\n      autocompleteIndex: 0,\r\n      autocompleteData: [] as AutocompleteEntry[]\r\n    };\r\n  },\r\n  watch: {\r\n    value: {\r\n      immediate: true,\r\n      handler(newVal: string): void {\r\n        if (!newVal) {\r\n          this.codeData = '';\r\n        } else {\r\n          this.codeData = newVal;\r\n        }\r\n      },\r\n    },\r\n    content: {\r\n      immediate: true,\r\n      handler(): void {\r\n        if (this.lineNumbers) {\r\n          this.$nextTick(() => {\r\n            this.setLineNumbersHeight();\r\n          });\r\n        }\r\n      },\r\n    },\r\n    lineNumbers(): void {\r\n      this.$nextTick(() => {\r\n        this.styleLineNumbers();\r\n        this.setLineNumbersHeight();\r\n      });\r\n    },\r\n    autocompleteIndex() {\r\n      Vue.nextTick(() => {\r\n        let node = this.$el.querySelector('ul.prism-editor__autocomplete > li.selected');\r\n        if (node) node.scrollIntoView({block: 'nearest'});\r\n      })\r\n    },\r\n  },\r\n  computed: {\r\n    isEmpty(): boolean {\r\n      return this.codeData.length === 0;\r\n    },\r\n    content(): string {\r\n      const result = this.highlight(this.codeData) + '<br />';\r\n      // todo: VNode support?\r\n      return result;\r\n    },\r\n    lineNumbersCount(): number {\r\n      const totalLines = this.codeData.split(/\\r\\n|\\n/).length;\r\n      return totalLines;\r\n    },\r\n    cursorOffset() {\r\n      let text: string = this.codeData;\r\n      let input = this.$refs.textarea as HTMLTextAreaElement;\r\n      let wrapper = this.$refs.wrapper as HTMLDivElement;\r\n      let lines = text.substring(0, input.selectionEnd || 0).split(/\\r\\n|\\n/);\r\n      let font_size = parseFloat(getComputedStyle(input).getPropertyValue('font-size'));\r\n      let line = lines.length;\r\n      let column = lines[lines.length-1].length;\r\n      return [\r\n        Math.min((column * 8.85 * (font_size / 16))    - wrapper.scrollLeft, wrapper.clientWidth - Math.min(240, wrapper.clientWidth)),\r\n        (line * 24.0 * (font_size / 16)) + 2  - wrapper.scrollTop,\r\n      ]\r\n    },\r\n  },\r\n  mounted() {\r\n    this._recordCurrentState();\r\n    this.styleLineNumbers();\r\n  },\r\n\r\n  methods: {\r\n    updateAutocompleteData() {\r\n      let input = this.$refs.textarea as HTMLTextAreaElement;\r\n      let data: AutocompleteEntry[] = typeof this.autocomplete == 'function' ? this.autocomplete(this.codeData, input.selectionEnd) : [];\r\n      let old_length = this.autocompleteData.length;\r\n      this.autocompleteData.splice(0, Infinity, ...data);\r\n      this.autocompleteOpen = true;\r\n      this.autocompleteIndex = Math.max(0, Math.min(this.autocompleteIndex, this.autocompleteData.length-1));\r\n      if (old_length > this.autocompleteData.length) this.autocompleteIndex = 0;\r\n    },\r\n    acceptAutocomplete(event: Event, option?: number) {\r\n      event.preventDefault()\r\n      if (option == undefined) option = this.autocompleteIndex;\r\n\r\n      let input = this.$refs.textarea as HTMLTextAreaElement;\r\n      let wrapper = this.$refs.wrapper as HTMLDivElement;\r\n      let suggestion = this.autocompleteData[option] || this.autocompleteData[0];\r\n      if (!suggestion) return;\r\n      \r\n      let overlap = suggestion.overlap || 0;\r\n      let new_text = [\r\n        this.codeData.substr(0, input.selectionEnd - overlap),\r\n        suggestion.text,\r\n        this.codeData.substring(input.selectionEnd),\r\n      ]\r\n      let result: string = new_text.join('');\r\n      let cursor_pos = input.selectionEnd - overlap + suggestion.text.length + (suggestion.text.endsWith(')') ? -1 : 0);\r\n      input.selectionStart = input.selectionEnd = cursor_pos;\r\n\r\n      this._applyEdits({\r\n        value: result,\r\n        selectionStart: cursor_pos,\r\n        selectionEnd: cursor_pos,\r\n      });\r\n      let inserted_characters = suggestion.text.length - suggestion.overlap;\r\n      Vue.nextTick(() => {\r\n        wrapper.scrollLeft += inserted_characters * 8.85;\r\n      })\r\n\r\n      if (suggestion.text.endsWith('.')) {\r\n        setTimeout(() => {\r\n          this.updateAutocompleteData();\r\n        }, 1);\r\n      } else {\r\n        this.autocompleteOpen = false;\r\n      }\r\n    },\r\n    setLineNumbersHeight(): void {\r\n      this.lineNumbersHeight = getComputedStyle(this.$refs.pre as HTMLTextAreaElement).height;\r\n    },\r\n    styleLineNumbers(): void {\r\n      if (!this.lineNumbers || !this.autoStyleLineNumbers) return;\r\n\r\n      const $editor = this.$refs.pre as HTMLTextAreaElement;\r\n      const $lineNumbers: HTMLDivElement | null = this.$el.querySelector('.prism-editor__line-numbers');\r\n      const editorStyles = window.getComputedStyle($editor);\r\n\r\n      this.$nextTick(() => {\r\n        const btlr: any = 'border-top-left-radius';\r\n        const bblr: any = 'border-bottom-left-radius';\r\n        if (!$lineNumbers) return;\r\n        $lineNumbers.style[btlr] = editorStyles[btlr];\r\n        $lineNumbers.style[bblr] = editorStyles[bblr];\r\n        $editor.style[btlr] = '0';\r\n        $editor.style[bblr] = '0';\r\n\r\n        const stylesList = ['background-color', 'margin-top', 'padding-top', 'font-family', 'font-size', 'line-height'];\r\n        stylesList.forEach((style: any) => {\r\n          $lineNumbers.style[style] = editorStyles[style];\r\n        });\r\n        $lineNumbers.style['margin-bottom' as any] = '-' + editorStyles['padding-top' as any];\r\n      });\r\n    },\r\n    _recordCurrentState(): void {\r\n      const input = this.$refs.textarea as HTMLTextAreaElement;\r\n\r\n      if (!input) return;\r\n      // Save current state of the input\r\n      const { value, selectionStart, selectionEnd } = input;\r\n\r\n      this._recordChange({\r\n        value,\r\n        selectionStart,\r\n        selectionEnd,\r\n      });\r\n    },\r\n    _getLines(text: string, position: number): Array<string> {\r\n      return text.substring(0, position).split('\\n');\r\n    },\r\n    _recordStateIfChange(): void {\r\n      if (this.history.stack[this.history.offset].value != this.codeData) {\r\n        this._recordChange({\r\n          value: this.codeData,\r\n          selectionStart: this.codeData.length,\r\n          selectionEnd: this.codeData.length,\r\n        });\r\n      }\r\n    },\r\n    _applyEdits(record: Record): void {\r\n      // Save last selection state\r\n      const input = this.$refs.textarea as HTMLTextAreaElement;\r\n      const last = this.history.stack[this.history.offset];\r\n\r\n      if (last && input) {\r\n        this.history.stack[this.history.offset] = {\r\n          ...last,\r\n          selectionStart: input.selectionStart,\r\n          selectionEnd: input.selectionEnd,\r\n        };\r\n      }\r\n\r\n      // Save the changes\r\n      this._recordChange(record);\r\n      this._updateInput(record);\r\n    },\r\n    _recordChange(record: Record, overwrite = false): void {\r\n      const { stack, offset } = this.history;\r\n\r\n      if (stack.length && offset > -1) {\r\n        // When something updates, drop the redo operations\r\n        this.history.stack = stack.slice(0, offset + 1);\r\n\r\n        // Limit the number of operations to 100\r\n        const count = this.history.stack.length;\r\n\r\n        if (count > HISTORY_LIMIT) {\r\n          const extras = count - HISTORY_LIMIT;\r\n\r\n          this.history.stack = stack.slice(extras, count);\r\n          this.history.offset = Math.max(this.history.offset - extras, 0);\r\n        }\r\n      }\r\n\r\n      const timestamp = Date.now();\r\n\r\n      if (overwrite) {\r\n        const last = this.history.stack[this.history.offset];\r\n\r\n        if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\r\n          // A previous entry exists and was in short interval\r\n\r\n          // Match the last word in the line\r\n          const re = /[^a-z0-9]([a-z0-9]+)$/i;\r\n\r\n          // Get the previous line\r\n          const previous = this._getLines(last.value, last.selectionStart).pop()?.match(re);\r\n\r\n          // Get the current line\r\n          const current = this._getLines(record.value, record.selectionStart).pop()?.match(re);\r\n\r\n          if (previous && current && current[1].startsWith(previous[1])) {\r\n            // The last word of the previous line and current line match\r\n            // Overwrite previous entry so that undo will remove whole word\r\n            this.history.stack[this.history.offset] = {\r\n              ...record,\r\n              timestamp,\r\n            };\r\n\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add the new operation to the stack\r\n      this.history.stack.push({ ...record, timestamp });\r\n      this.history.offset++;\r\n    },\r\n\r\n    _updateInput(record: Record): void {\r\n      const input = this.$refs.textarea as HTMLTextAreaElement;\r\n\r\n      if (!input) return;\r\n\r\n      // Update values and selection state\r\n      input.value = record.value;\r\n      input.selectionStart = record.selectionStart;\r\n      input.selectionEnd = record.selectionEnd;\r\n\r\n      this.$emit('input', record.value);\r\n      // this.props.onValueChange(record.value);\r\n    },\r\n    handleChange(e: KeyboardEvent): void {\r\n      const { value, selectionStart, selectionEnd } = e.target as HTMLTextAreaElement;\r\n\r\n      this._recordChange(\r\n        {\r\n          value,\r\n          selectionStart,\r\n          selectionEnd,\r\n        },\r\n        true\r\n      );\r\n      this.$emit('input', value);\r\n      // this.props.onValueChange(value);\r\n    },\r\n    _undoEdit(): void {\r\n      const { stack, offset } = this.history;\r\n\r\n      // Get the previous edit\r\n      const record = stack[offset - 1];\r\n\r\n      if (record) {\r\n        // Apply the changes and update the offset\r\n        this._updateInput(record);\r\n        this.history.offset = Math.max(offset - 1, 0);\r\n      }\r\n    },\r\n    _redoEdit(): void {\r\n      const { stack, offset } = this.history;\r\n\r\n      // Get the next edit\r\n      const record = stack[offset + 1];\r\n\r\n      if (record) {\r\n        // Apply the changes and update the offset\r\n        this._updateInput(record);\r\n        this.history.offset = Math.min(offset + 1, stack.length - 1);\r\n      }\r\n    },\r\n    handleKeyDown(e: KeyboardEvent): void {\r\n      // console.log(navigator.platform);\r\n      const { tabSize, insertSpaces, ignoreTabKey } = this;\r\n\r\n      if (this.$listeners.keydown) {\r\n        // onKeyDown(e);\r\n        this.$emit('keydown', e);\r\n\r\n        if (e.defaultPrevented) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (e.keyCode === 9 && this.autocompleteData.length && this.autocompleteOpen) {\r\n        this.acceptAutocomplete(e);\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        return;\r\n      }\r\n      if (e.keyCode === 27) {\r\n        // Escape\r\n        if (this.autocompleteData.length && this.autocompleteOpen) {\r\n          e.preventDefault();\r\n          this.autocompleteOpen = false;\r\n          return;\r\n        }\r\n      } else if (e.keyCode === 38) {\r\n        // Up\r\n        if (this.autocompleteData.length && this.autocompleteOpen) {\r\n          e.preventDefault();\r\n          this.autocompleteIndex = (this.autocompleteIndex ? this.autocompleteIndex : this.autocompleteData.length) - 1;\r\n          return;\r\n        }\r\n      } else if (e.keyCode === 40) {\r\n        // Down\r\n        if (this.autocompleteData.length && this.autocompleteOpen) {\r\n          e.preventDefault();\r\n          this.autocompleteIndex = (this.autocompleteIndex + 1) % this.autocompleteData.length;\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (e.keyCode === KEYCODE_ESCAPE) {\r\n        (<HTMLTextAreaElement>e.target).blur();\r\n        this.$emit('blur', e);\r\n      }\r\n\r\n      const { value, selectionStart, selectionEnd } = e.target as HTMLTextAreaElement;\r\n\r\n      const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\r\n\r\n      if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.capture) {\r\n        // Prevent focus change\r\n        e.preventDefault();\r\n\r\n        if (e.shiftKey) {\r\n          // Unindent selected lines\r\n          const linesBeforeCaret = this._getLines(value, selectionStart);\r\n          const startLine = linesBeforeCaret.length - 1;\r\n          const endLine = this._getLines(value, selectionEnd).length - 1;\r\n          const nextValue = value\r\n            .split('\\n')\r\n            .map((line, i) => {\r\n              if (i >= startLine && i <= endLine && line.startsWith(tabCharacter)) {\r\n                return line.substring(tabCharacter.length);\r\n              }\r\n\r\n              return line;\r\n            })\r\n            .join('\\n');\r\n\r\n          if (value !== nextValue) {\r\n            const startLineText = linesBeforeCaret[startLine];\r\n\r\n            this._applyEdits({\r\n              value: nextValue,\r\n              // Move the start cursor if first line in selection was modified\r\n              // It was modified only if it started with a tab\r\n              selectionStart: startLineText.startsWith(tabCharacter)\r\n                ? selectionStart - tabCharacter.length\r\n                : selectionStart,\r\n              // Move the end cursor by total number of characters removed\r\n              selectionEnd: selectionEnd - (value.length - nextValue.length),\r\n            });\r\n          }\r\n        } else if (selectionStart !== selectionEnd) {\r\n          // Indent selected lines\r\n          const linesBeforeCaret = this._getLines(value, selectionStart);\r\n          const startLine = linesBeforeCaret.length - 1;\r\n          const endLine = this._getLines(value, selectionEnd).length - 1;\r\n          const startLineText = linesBeforeCaret[startLine];\r\n\r\n          this._applyEdits({\r\n            value: value\r\n              .split('\\n')\r\n              .map((line, i) => {\r\n                if (i >= startLine && i <= endLine) {\r\n                  return tabCharacter + line;\r\n                }\r\n\r\n                return line;\r\n              })\r\n              .join('\\n'),\r\n            // Move the start cursor by number of characters added in first line of selection\r\n            // Don't move it if it there was no text before cursor\r\n            selectionStart: /\\S/.test(startLineText) ? selectionStart + tabCharacter.length : selectionStart,\r\n            // Move the end cursor by total number of characters added\r\n            selectionEnd: selectionEnd + tabCharacter.length * (endLine - startLine + 1),\r\n          });\r\n        } else {\r\n          const updatedSelection = selectionStart + tabCharacter.length;\r\n\r\n          this._applyEdits({\r\n            // Insert tab character at caret\r\n            value: value.substring(0, selectionStart) + tabCharacter + value.substring(selectionEnd),\r\n            // Update caret position\r\n            selectionStart: updatedSelection,\r\n            selectionEnd: updatedSelection,\r\n          });\r\n        }\r\n      } else if (e.keyCode === KEYCODE_BACKSPACE) {\r\n        const hasSelection = selectionStart !== selectionEnd;\r\n        const textBeforeCaret = value.substring(0, selectionStart);\r\n\r\n        if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\r\n          // Prevent default delete behaviour\r\n          e.preventDefault();\r\n\r\n          const updatedSelection = selectionStart - tabCharacter.length;\r\n\r\n          this._applyEdits({\r\n            // Remove tab character at caret\r\n            value: value.substring(0, selectionStart - tabCharacter.length) + value.substring(selectionEnd),\r\n            // Update caret position\r\n            selectionStart: updatedSelection,\r\n            selectionEnd: updatedSelection,\r\n          });\r\n        }\r\n      } else if (e.keyCode === KEYCODE_ENTER) {\r\n        \r\n        if (this.autocompleteData.length && this.autocompleteOpen) {\r\n          this.acceptAutocomplete(e);\r\n\r\n        } else if (selectionStart === selectionEnd) {\r\n          // Get the current line\r\n          const line = this._getLines(value, selectionStart).pop();\r\n          const matches = line?.match(/^\\s+/);\r\n\r\n          if (matches && matches[0]) {\r\n            e.preventDefault();\r\n\r\n            // Preserve indentation on inserting a new line\r\n            const indent = '\\n' + matches[0];\r\n            const updatedSelection = selectionStart + indent.length;\r\n\r\n            this._applyEdits({\r\n              // Insert indentation character at caret\r\n              value: value.substring(0, selectionStart) + indent + value.substring(selectionEnd),\r\n              // Update caret position\r\n              selectionStart: updatedSelection,\r\n              selectionEnd: updatedSelection,\r\n            });\r\n          }\r\n        }\r\n      } else if (BRACKET_PAIRS[e.key]) {\r\n        // If text is selected, wrap them in the characters\r\n        if (selectionStart !== selectionEnd) {\r\n          e.preventDefault();\r\n\r\n          this._applyEdits({\r\n            value:\r\n              value.substring(0, selectionStart) +\r\n              e.key +\r\n              value.substring(selectionStart, selectionEnd) +\r\n              BRACKET_PAIRS[e.key] +\r\n              value.substring(selectionEnd),\r\n            // Update caret position\r\n            selectionStart: selectionStart + 1,\r\n            selectionEnd: selectionEnd + 1,\r\n          });\r\n        }\r\n      } else if (\r\n        (isMacLike\r\n          ? // Trigger undo with ⌘+Z on Mac\r\n            e.metaKey && e.keyCode === KEYCODE_Z\r\n          : // Trigger undo with Ctrl+Z on other platforms\r\n            e.ctrlKey && e.keyCode === KEYCODE_Z) &&\r\n        !e.shiftKey &&\r\n        !e.altKey\r\n      ) {\r\n        e.preventDefault();\r\n\r\n        this._undoEdit();\r\n      } else if (\r\n        (isMacLike\r\n          ? // Trigger redo with ⌘+Shift+Z on Mac\r\n            e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\r\n          : isWindows\r\n          ? // Trigger redo with Ctrl+Y on Windows\r\n            e.ctrlKey && e.keyCode === KEYCODE_Y\r\n          : // Trigger redo with Ctrl+Shift+Z on other platforms\r\n            e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\r\n        !e.altKey\r\n      ) {\r\n        e.preventDefault();\r\n\r\n        this._redoEdit();\r\n      } else if (e.keyCode === KEYCODE_M && e.ctrlKey && (isMacLike ? e.shiftKey : true)) {\r\n        e.preventDefault();\r\n\r\n        // Toggle capturing tab key so users can focus away\r\n        this.capture = !this.capture;\r\n      }\r\n      if (e.keyCode !== 13 && e.keyCode !== 9) {\r\n        setTimeout(() => {\r\n          this.updateAutocompleteData();\r\n        }, 1);\r\n      }\r\n    },\r\n  },\r\n  render(h): VNode {\r\n    const lineNumberWidthCalculator = h(\r\n      'div',\r\n      {\r\n        attrs: {\r\n          class: 'prism-editor__line-width-calc',\r\n          style: 'height: 0px; visibility: hidden; pointer-events: none;',\r\n        },\r\n      },\r\n      '999'\r\n    );\r\n    const lineNumbers = h(\r\n      'div',\r\n      {\r\n        staticClass: 'prism-editor__line-numbers',\r\n        style: {\r\n          'min-height': this.lineNumbersHeight,\r\n        },\r\n        attrs: {\r\n          'aria-hidden': 'true',\r\n        },\r\n      },\r\n      [\r\n        lineNumberWidthCalculator,\r\n        Array.from(Array(this.lineNumbersCount).keys()).map((_, index) => {\r\n          return h('div', { attrs: { class: 'prism-editor__line-number token comment' } }, `${++index}`);\r\n        }),\r\n      ]\r\n    );\r\n\r\n    const autocompleteList = (this.autocompleteOpen && this.autocompleteData.length) ? h(\r\n      'ul',\r\n      {\r\n        staticClass: 'prism-editor__autocomplete',\r\n        style: {left: this.cursorOffset[0] + 'px', top: this.cursorOffset[1] + 'px'}\r\n      },\r\n      this.autocompleteData.map((data: AutocompleteEntry, i) => {\r\n        return h('li', {\r\n          key: data.text,\r\n          class: {selected: i == this.autocompleteIndex},\r\n          on: {\r\n            mousedown: ($event: MouseEvent) => {\r\n              this.acceptAutocomplete($event, i);\r\n            }\r\n          }\r\n        }, [data.label || data.text]);\r\n      })\r\n    ) : undefined;\r\n\r\n    const textarea = h('textarea', {\r\n      ref: 'textarea',\r\n      on: {\r\n        input: this.handleChange,\r\n        keydown: this.handleKeyDown,\r\n        click: ($event: MouseEvent) => {\r\n          this.autocompleteOpen = false;\r\n          this.$emit('click', $event);\r\n        },\r\n        keyup: ($event: KeyboardEvent) => {\r\n          this.$emit('keyup', $event);\r\n        },\r\n        focus: ($event: FocusEvent) => {\r\n          this._recordStateIfChange();\r\n          this.$emit('focus', $event);\r\n        },\r\n        blur: ($event: FocusEvent) => {\r\n          this.autocompleteOpen = false;\r\n          this.$emit('blur', $event);\r\n        },\r\n      },\r\n      staticClass: 'prism-editor__textarea',\r\n      class: {\r\n        'prism-editor__textarea--empty': this.isEmpty,\r\n      },\r\n      attrs: {\r\n        spellCheck: 'false',\r\n        autocapitalize: 'off',\r\n        autocomplete: 'off',\r\n        autocorrect: 'off',\r\n        'data-gramm': 'false',\r\n        placeholder: this.placeholder,\r\n        'data-testid': 'textarea',\r\n        readonly: this.readonly,\r\n      },\r\n      domProps: {\r\n        value: this.codeData,\r\n      },\r\n    });\r\n    const preview = h('pre', {\r\n      ref: 'pre',\r\n      staticClass: 'prism-editor__editor',\r\n      attrs: {\r\n        'data-testid': 'preview',\r\n      },\r\n      domProps: {\r\n        innerHTML: this.content,\r\n      },\r\n    });\r\n    const editorContainer = h('div', { staticClass: 'prism-editor__container' }, [textarea, preview]);\r\n    const wrapper = h('div', { staticClass: 'prism-editor-wrapper', ref: 'wrapper' }, [this.lineNumbers && lineNumbers, editorContainer]);\r\n    return h('div', { staticClass: 'prism-editor-component' }, [wrapper, autocompleteList]);\r\n  },\r\n});\r\n"],"names":["KEYCODE_ENTER","KEYCODE_TAB","KEYCODE_BACKSPACE","KEYCODE_Y","KEYCODE_Z","KEYCODE_M","KEYCODE_ESCAPE","BRACKET_PAIRS","HISTORY_LIMIT","HISTORY_TIME_GAP","isWindows","global","test","navigator","platform","isMacLike","PrismEditor","Vue","extend","props","lineNumbers","type","Boolean","autoStyleLineNumbers","readonly","value","String","highlight","Function","required","tabSize","Number","insertSpaces","ignoreTabKey","placeholder","autocomplete","data","capture","history","stack","offset","lineNumbersHeight","codeData","autocompleteOpen","autocompleteIndex","autocompleteData","watch","immediate","handler","newVal","content","$nextTick","setLineNumbersHeight","styleLineNumbers","nextTick","node","$el","querySelector","scrollIntoView","block","computed","isEmpty","length","result","lineNumbersCount","totalLines","split","cursorOffset","text","input","$refs","textarea","wrapper","lines","substring","selectionEnd","font_size","parseFloat","getComputedStyle","getPropertyValue","line","column","Math","min","scrollLeft","clientWidth","scrollTop","mounted","_recordCurrentState","methods","updateAutocompleteData","old_length","splice","Infinity","max","acceptAutocomplete","event","option","preventDefault","undefined","suggestion","overlap","new_text","substr","join","cursor_pos","endsWith","selectionStart","_applyEdits","inserted_characters","setTimeout","pre","height","$editor","$lineNumbers","editorStyles","window","btlr","bblr","style","stylesList","forEach","_recordChange","_getLines","position","_recordStateIfChange","record","last","_updateInput","overwrite","slice","count","extras","timestamp","Date","now","re","previous","pop","match","current","startsWith","push","$emit","handleChange","e","target","_undoEdit","_redoEdit","handleKeyDown","$listeners","keydown","defaultPrevented","keyCode","stopPropagation","blur","tabCharacter","repeat","shiftKey","linesBeforeCaret","startLine","endLine","nextValue","map","i","startLineText","updatedSelection","hasSelection","textBeforeCaret","matches","indent","key","metaKey","ctrlKey","altKey","render","h","lineNumberWidthCalculator","attrs","staticClass","Array","from","keys","_","index","autocompleteList","left","top","selected","on","mousedown","$event","label","ref","click","keyup","focus","spellCheck","autocapitalize","autocorrect","domProps","preview","innerHTML","editorContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,aAAa,GAAG,EAAtB;AACA,IAAMC,WAAW,GAAG,CAApB;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,SAAS,GAAG,EAAlB;AACA,IAAMC,cAAc,GAAG,EAAvB;AAEA,IAAMC,aAAa,GAAgC;AACjD,OAAI,GAD6C;AAEjD,OAAI,GAF6C;AAGjD,OAAI,GAH6C;AAIjD,OAAI,GAJ6C;AAKjD,OAAI;AAL6C,CAAnD;AAQA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,gBAAgB,GAAG,IAAzB;AAEA,IAAMC,SAAS,GAAG,eAAeC,MAAf,yBAAgCC,IAAP,CAAYC,SAAS,CAACC,QAAtB,CAA3C;AACA,IAAMC,SAAS,GAAG,eAAeJ,MAAf,4CAAmDC,IAA1B,CAA+BC,SAAS,CAACC,QAAzC,CAA3C;IA6BaE,WAAW,gBAAGC,GAAG,CAACC,MAAJ,CAAW;AACpCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,IAAI,EAAEC,OADK;AAEX,iBAAS;AAFE,KADR;AAKLC,IAAAA,oBAAoB,EAAE;AACpBF,MAAAA,IAAI,EAAEC,OADc;AAEpB,iBAAS;AAFW,KALjB;AASLE,IAAAA,QAAQ,EAAE;AACRH,MAAAA,IAAI,EAAEC,OADE;AAER,iBAAS;AAFD,KATL;AAaLG,IAAAA,KAAK,EAAE;AACLJ,MAAAA,IAAI,EAAEK,MADD;AAEL,iBAAS;AAFJ,KAbF;AAiBLC,IAAAA,SAAS,EAAE;AACTN,MAAAA,IAAI,EAAEO,QADG;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAjBN;AAqBLC,IAAAA,OAAO,EAAE;AACPT,MAAAA,IAAI,EAAEU,MADC;AAEP,iBAAS;AAFF,KArBJ;AAyBLC,IAAAA,YAAY,EAAE;AACZX,MAAAA,IAAI,EAAEC,OADM;AAEZ,iBAAS;AAFG,KAzBT;AA6BLW,IAAAA,YAAY,EAAE;AACZZ,MAAAA,IAAI,EAAEC,OADM;AAEZ,iBAAS;AAFG,KA7BT;AAiCLY,IAAAA,WAAW,EAAE;AACXb,MAAAA,IAAI,EAAEK,MADK;AAEX,iBAAS;AAFE,KAjCR;AAqCLS,IAAAA,YAAY,EAAE;AACZd,MAAAA,IAAI,EAAEO,QADM;AAAA;AAGV,eAAO,EAAP;AACD;AAJW;AArCT,GAD6B;AA6CpCQ,EAAAA,IA7CoC;AA8ClC,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE,EADA;AAEPC,QAAAA,MAAM,EAAE,CAAC;AAFF,OAFJ;AAMLC,MAAAA,iBAAiB,EAAE,MANd;AAOLC,MAAAA,QAAQ,EAAE,EAPL;AASLC,MAAAA,gBAAgB,EAAE,KATb;AAULC,MAAAA,iBAAiB,EAAE,CAVd;AAWLC,MAAAA,gBAAgB,EAAE;AAXb,KAAP;AAaD,GA3DmC;AA4DpCC,EAAAA,KAAK,EAAE;AACLrB,IAAAA,KAAK,EAAE;AACLsB,MAAAA,SAAS,EAAE,IADN;AAELC,MAAAA,OAFK,mBAEGC,MAFH;AAGH,YAAI,CAACA,MAAL,EAAa;AACX,eAAKP,QAAL,GAAgB,EAAhB;AACD,SAFD,MAEO;AACL,eAAKA,QAAL,GAAgBO,MAAhB;AACD;AACF;AARI,KADF;AAWLC,IAAAA,OAAO,EAAE;AACPH,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,OAFO;;;AAGL,YAAI,KAAK5B,WAAT,EAAsB;AACpB,eAAK+B,SAAL,CAAe;AACb,YAAA,KAAI,CAACC,oBAAL;AACD,WAFD;AAGD;AACF;AARM,KAXJ;AAqBLhC,IAAAA,WArBK;;;AAsBH,WAAK+B,SAAL,CAAe;AACb,QAAA,MAAI,CAACE,gBAAL;;AACA,QAAA,MAAI,CAACD,oBAAL;AACD,OAHD;AAID,KA1BI;AA2BLR,IAAAA,iBA3BK;;;AA4BH3B,MAAAA,GAAG,CAACqC,QAAJ,CAAa;AACX,YAAIC,IAAI,GAAG,MAAI,CAACC,GAAL,CAASC,aAAT,CAAuB,6CAAvB,CAAX;;AACA,YAAIF,IAAJ,EAAUA,IAAI,CAACG,cAAL,CAAoB;AAACC,UAAAA,KAAK,EAAE;AAAR,SAApB;AACX,OAHD;AAID;AAhCI,GA5D6B;AA8FpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OADQ;AAEN,aAAO,KAAKnB,QAAL,CAAcoB,MAAd,KAAyB,CAAhC;AACD,KAHO;AAIRZ,IAAAA,OAJQ;AAKN,UAAMa,MAAM,GAAG,KAAKpC,SAAL,CAAe,KAAKe,QAApB,IAAgC,QAA/C;;AAEA,aAAOqB,MAAP;AACD,KARO;AASRC,IAAAA,gBATQ;AAUN,UAAMC,UAAU,GAAG,KAAKvB,QAAL,CAAcwB,KAAd,CAAoB,SAApB,EAA+BJ,MAAlD;AACA,aAAOG,UAAP;AACD,KAZO;AAaRE,IAAAA,YAbQ;AAcN,UAAIC,IAAI,GAAW,KAAK1B,QAAxB;AACA,UAAI2B,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAvB;AACA,UAAIC,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAzB;AACA,UAAIC,KAAK,GAAGL,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBL,KAAK,CAACM,YAAN,IAAsB,CAAxC,EAA2CT,KAA3C,CAAiD,SAAjD,CAAZ;AACA,UAAIU,SAAS,GAAGC,UAAU,CAACC,gBAAgB,CAACT,KAAD,CAAhB,CAAwBU,gBAAxB,CAAyC,WAAzC,CAAD,CAA1B;AACA,UAAIC,IAAI,GAAGP,KAAK,CAACX,MAAjB;AACA,UAAImB,MAAM,GAAGR,KAAK,CAACA,KAAK,CAACX,MAAN,GAAa,CAAd,CAAL,CAAsBA,MAAnC;AACA,aAAO,CACLoB,IAAI,CAACC,GAAL,CAAUF,MAAM,GAAG,IAAT,IAAiBL,SAAS,GAAG,EAA7B,CAAD,GAAwCJ,OAAO,CAACY,UAAzD,EAAqEZ,OAAO,CAACa,WAAR,GAAsBH,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcX,OAAO,CAACa,WAAtB,CAA3F,CADK,EAEJL,IAAI,GAAG,IAAP,IAAeJ,SAAS,GAAG,EAA3B,CAAD,GAAmC,CAAnC,GAAwCJ,OAAO,CAACc,SAF3C,CAAP;AAID;AAzBO,GA9F0B;AAyHpCC,EAAAA,OAzHoC;AA0HlC,SAAKC,mBAAL;;AACA,SAAKnC,gBAAL;AACD,GA5HmC;AA8HpCoC,EAAAA,OAAO,EAAE;AACPC,IAAAA,sBADO;;;AAEL,UAAIrB,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAvB;AACA,UAAInC,IAAI,GAAwB,OAAO,KAAKD,YAAZ,IAA4B,UAA5B,GAAyC,KAAKA,YAAL,CAAkB,KAAKO,QAAvB,EAAiC2B,KAAK,CAACM,YAAvC,CAAzC,GAAgG,EAAhI;AACA,UAAIgB,UAAU,GAAG,KAAK9C,gBAAL,CAAsBiB,MAAvC;;AACA,oCAAKjB,gBAAL,EAAsB+C,MAAtB,+BAA6B,CAA7B,EAAgCC,QAAhC,SAA6CzD,IAA7C;;AACA,WAAKO,gBAAL,GAAwB,IAAxB;AACA,WAAKC,iBAAL,GAAyBsC,IAAI,CAACY,GAAL,CAAS,CAAT,EAAYZ,IAAI,CAACC,GAAL,CAAS,KAAKvC,iBAAd,EAAiC,KAAKC,gBAAL,CAAsBiB,MAAtB,GAA6B,CAA9D,CAAZ,CAAzB;AACA,UAAI6B,UAAU,GAAG,KAAK9C,gBAAL,CAAsBiB,MAAvC,EAA+C,KAAKlB,iBAAL,GAAyB,CAAzB;AAChD,KATM;AAUPmD,IAAAA,kBAVO,8BAUYC,KAVZ,EAU0BC,MAV1B;;;AAWLD,MAAAA,KAAK,CAACE,cAAN;AACA,UAAID,MAAM,IAAIE,SAAd,EAAyBF,MAAM,GAAG,KAAKrD,iBAAd;AAEzB,UAAIyB,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAvB;AACA,UAAIC,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAzB;AACA,UAAI4B,UAAU,GAAG,KAAKvD,gBAAL,CAAsBoD,MAAtB,KAAiC,KAAKpD,gBAAL,CAAsB,CAAtB,CAAlD;AACA,UAAI,CAACuD,UAAL,EAAiB;AAEjB,UAAIC,OAAO,GAAGD,UAAU,CAACC,OAAX,IAAsB,CAApC;AACA,UAAIC,QAAQ,GAAG,CACb,KAAK5D,QAAL,CAAc6D,MAAd,CAAqB,CAArB,EAAwBlC,KAAK,CAACM,YAAN,GAAqB0B,OAA7C,CADa,EAEbD,UAAU,CAAChC,IAFE,EAGb,KAAK1B,QAAL,CAAcgC,SAAd,CAAwBL,KAAK,CAACM,YAA9B,CAHa,CAAf;AAKA,UAAIZ,MAAM,GAAWuC,QAAQ,CAACE,IAAT,CAAc,EAAd,CAArB;AACA,UAAIC,UAAU,GAAGpC,KAAK,CAACM,YAAN,GAAqB0B,OAArB,GAA+BD,UAAU,CAAChC,IAAX,CAAgBN,MAA/C,IAAyDsC,UAAU,CAAChC,IAAX,CAAgBsC,QAAhB,CAAyB,GAAzB,IAAgC,CAAC,CAAjC,GAAqC,CAA9F,CAAjB;AACArC,MAAAA,KAAK,CAACsC,cAAN,GAAuBtC,KAAK,CAACM,YAAN,GAAqB8B,UAA5C;;AAEA,WAAKG,WAAL,CAAiB;AACfnF,QAAAA,KAAK,EAAEsC,MADQ;AAEf4C,QAAAA,cAAc,EAAEF,UAFD;AAGf9B,QAAAA,YAAY,EAAE8B;AAHC,OAAjB;;AAKA,UAAII,mBAAmB,GAAGT,UAAU,CAAChC,IAAX,CAAgBN,MAAhB,GAAyBsC,UAAU,CAACC,OAA9D;AACApF,MAAAA,GAAG,CAACqC,QAAJ,CAAa;AACXkB,QAAAA,OAAO,CAACY,UAAR,IAAsByB,mBAAmB,GAAG,IAA5C;AACD,OAFD;;AAIA,UAAIT,UAAU,CAAChC,IAAX,CAAgBsC,QAAhB,CAAyB,GAAzB,CAAJ,EAAmC;AACjCI,QAAAA,UAAU,CAAC;AACT,UAAA,MAAI,CAACpB,sBAAL;AACD,SAFS,EAEP,CAFO,CAAV;AAGD,OAJD,MAIO;AACL,aAAK/C,gBAAL,GAAwB,KAAxB;AACD;AACF,KA9CM;AA+CPS,IAAAA,oBA/CO;AAgDL,WAAKX,iBAAL,GAAyBqC,gBAAgB,CAAC,KAAKR,KAAL,CAAWyC,GAAZ,CAAhB,CAAwDC,MAAjF;AACD,KAjDM;AAkDP3D,IAAAA,gBAlDO;AAmDL,UAAI,CAAC,KAAKjC,WAAN,IAAqB,CAAC,KAAKG,oBAA/B,EAAqD;AAErD,UAAM0F,OAAO,GAAG,KAAK3C,KAAL,CAAWyC,GAA3B;AACA,UAAMG,YAAY,GAA0B,KAAK1D,GAAL,CAASC,aAAT,CAAuB,6BAAvB,CAA5C;AACA,UAAM0D,YAAY,GAAGC,MAAM,CAACtC,gBAAP,CAAwBmC,OAAxB,CAArB;AAEA,WAAK9D,SAAL,CAAe;AACb,YAAMkE,IAAI,GAAQ,wBAAlB;AACA,YAAMC,IAAI,GAAQ,2BAAlB;AACA,YAAI,CAACJ,YAAL,EAAmB;AACnBA,QAAAA,YAAY,CAACK,KAAb,CAAmBF,IAAnB,IAA2BF,YAAY,CAACE,IAAD,CAAvC;AACAH,QAAAA,YAAY,CAACK,KAAb,CAAmBD,IAAnB,IAA2BH,YAAY,CAACG,IAAD,CAAvC;AACAL,QAAAA,OAAO,CAACM,KAAR,CAAcF,IAAd,IAAsB,GAAtB;AACAJ,QAAAA,OAAO,CAACM,KAAR,CAAcD,IAAd,IAAsB,GAAtB;AAEA,YAAME,UAAU,GAAG,CAAC,kBAAD,EAAqB,YAArB,EAAmC,aAAnC,EAAkD,aAAlD,EAAiE,WAAjE,EAA8E,aAA9E,CAAnB;AACAA,QAAAA,UAAU,CAACC,OAAX,CAAmB,UAACF,KAAD;AACjBL,UAAAA,YAAY,CAACK,KAAb,CAAmBA,KAAnB,IAA4BJ,YAAY,CAACI,KAAD,CAAxC;AACD,SAFD;AAGAL,QAAAA,YAAY,CAACK,KAAb,CAAmB,eAAnB,IAA6C,MAAMJ,YAAY,CAAC,aAAD,CAA/D;AACD,OAdD;AAeD,KAxEM;AAyEP3B,IAAAA,mBAzEO;AA0EL,UAAMnB,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAzB;AAEA,UAAI,CAACF,KAAL,EAAY;;AAEZ,UAAQ5C,KAAR,GAAgD4C,KAAhD,CAAQ5C,KAAR;AAAA,UAAekF,cAAf,GAAgDtC,KAAhD,CAAesC,cAAf;AAAA,UAA+BhC,YAA/B,GAAgDN,KAAhD,CAA+BM,YAA/B;;AAEA,WAAK+C,aAAL,CAAmB;AACjBjG,QAAAA,KAAK,EAALA,KADiB;AAEjBkF,QAAAA,cAAc,EAAdA,cAFiB;AAGjBhC,QAAAA,YAAY,EAAZA;AAHiB,OAAnB;AAKD,KArFM;AAsFPgD,IAAAA,SAtFO,qBAsFGvD,IAtFH,EAsFiBwD,QAtFjB;AAuFL,aAAOxD,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBkD,QAAlB,EAA4B1D,KAA5B,CAAkC,IAAlC,CAAP;AACD,KAxFM;AAyFP2D,IAAAA,oBAzFO;AA0FL,UAAI,KAAKvF,OAAL,CAAaC,KAAb,CAAmB,KAAKD,OAAL,CAAaE,MAAhC,EAAwCf,KAAxC,IAAiD,KAAKiB,QAA1D,EAAoE;AAClE,aAAKgF,aAAL,CAAmB;AACjBjG,UAAAA,KAAK,EAAE,KAAKiB,QADK;AAEjBiE,UAAAA,cAAc,EAAE,KAAKjE,QAAL,CAAcoB,MAFb;AAGjBa,UAAAA,YAAY,EAAE,KAAKjC,QAAL,CAAcoB;AAHX,SAAnB;AAKD;AACF,KAjGM;AAkGP8C,IAAAA,WAlGO,uBAkGKkB,MAlGL;AAmGL;AACA,UAAMzD,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAzB;AACA,UAAMwD,IAAI,GAAG,KAAKzF,OAAL,CAAaC,KAAb,CAAmB,KAAKD,OAAL,CAAaE,MAAhC,CAAb;;AAEA,UAAIuF,IAAI,IAAI1D,KAAZ,EAAmB;AACjB,aAAK/B,OAAL,CAAaC,KAAb,CAAmB,KAAKD,OAAL,CAAaE,MAAhC,iBACKuF,IADL;AAEEpB,UAAAA,cAAc,EAAEtC,KAAK,CAACsC,cAFxB;AAGEhC,UAAAA,YAAY,EAAEN,KAAK,CAACM;AAHtB;AAKD;;;AAGD,WAAK+C,aAAL,CAAmBI,MAAnB;;AACA,WAAKE,YAAL,CAAkBF,MAAlB;AACD,KAlHM;AAmHPJ,IAAAA,aAnHO,yBAmHOI,MAnHP,EAmHuBG,SAnHvB;UAmHuBA;AAAAA,QAAAA,YAAY;;;AACxC,0BAA0B,KAAK3F,OAA/B;AAAA,UAAQC,KAAR,iBAAQA,KAAR;AAAA,UAAeC,MAAf,iBAAeA,MAAf;;AAEA,UAAID,KAAK,CAACuB,MAAN,IAAgBtB,MAAM,GAAG,CAAC,CAA9B,EAAiC;AAC/B;AACA,aAAKF,OAAL,CAAaC,KAAb,GAAqBA,KAAK,CAAC2F,KAAN,CAAY,CAAZ,EAAe1F,MAAM,GAAG,CAAxB,CAArB,CAF+B;;AAK/B,YAAM2F,KAAK,GAAG,KAAK7F,OAAL,CAAaC,KAAb,CAAmBuB,MAAjC;;AAEA,YAAIqE,KAAK,GAAG3H,aAAZ,EAA2B;AACzB,cAAM4H,MAAM,GAAGD,KAAK,GAAG3H,aAAvB;AAEA,eAAK8B,OAAL,CAAaC,KAAb,GAAqBA,KAAK,CAAC2F,KAAN,CAAYE,MAAZ,EAAoBD,KAApB,CAArB;AACA,eAAK7F,OAAL,CAAaE,MAAb,GAAsB0C,IAAI,CAACY,GAAL,CAAS,KAAKxD,OAAL,CAAaE,MAAb,GAAsB4F,MAA/B,EAAuC,CAAvC,CAAtB;AACD;AACF;;AAED,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;;AAEA,UAAIN,SAAJ,EAAe;AACb,YAAMF,IAAI,GAAG,KAAKzF,OAAL,CAAaC,KAAb,CAAmB,KAAKD,OAAL,CAAaE,MAAhC,CAAb;;AAEA,YAAIuF,IAAI,IAAIM,SAAS,GAAGN,IAAI,CAACM,SAAjB,GAA6B5H,gBAAzC,EAA2D;AAAA;;AACzD;AAEA;AACA,cAAM+H,EAAE,GAAG,wBAAX,CAJyD;;AAOzD,cAAMC,QAAQ,0BAAG,KAAKd,SAAL,CAAeI,IAAI,CAACtG,KAApB,EAA2BsG,IAAI,CAACpB,cAAhC,EAAgD+B,GAAhD,EAAH,wDAAG,oBAAuDC,KAAvD,CAA6DH,EAA7D,CAAjB,CAPyD;;AAUzD,cAAMI,OAAO,2BAAG,KAAKjB,SAAL,CAAeG,MAAM,CAACrG,KAAtB,EAA6BqG,MAAM,CAACnB,cAApC,EAAoD+B,GAApD,EAAH,yDAAG,qBAA2DC,KAA3D,CAAiEH,EAAjE,CAAhB;;AAEA,cAAIC,QAAQ,IAAIG,OAAZ,IAAuBA,OAAO,CAAC,CAAD,CAAP,CAAWC,UAAX,CAAsBJ,QAAQ,CAAC,CAAD,CAA9B,CAA3B,EAA+D;AAC7D;AACA;AACA,iBAAKnG,OAAL,CAAaC,KAAb,CAAmB,KAAKD,OAAL,CAAaE,MAAhC,iBACKsF,MADL;AAEEO,cAAAA,SAAS,EAATA;AAFF;AAKA;AACD;AACF;AACF;;;AAGD,WAAK/F,OAAL,CAAaC,KAAb,CAAmBuG,IAAnB,cAA6BhB,MAA7B;AAAqCO,QAAAA,SAAS,EAATA;AAArC;AACA,WAAK/F,OAAL,CAAaE,MAAb;AACD,KAtKM;AAwKPwF,IAAAA,YAxKO,wBAwKMF,MAxKN;AAyKL,UAAMzD,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAzB;AAEA,UAAI,CAACF,KAAL,EAAY;;AAGZA,MAAAA,KAAK,CAAC5C,KAAN,GAAcqG,MAAM,CAACrG,KAArB;AACA4C,MAAAA,KAAK,CAACsC,cAAN,GAAuBmB,MAAM,CAACnB,cAA9B;AACAtC,MAAAA,KAAK,CAACM,YAAN,GAAqBmD,MAAM,CAACnD,YAA5B;AAEA,WAAKoE,KAAL,CAAW,OAAX,EAAoBjB,MAAM,CAACrG,KAA3B;AAED,KApLM;AAqLPuH,IAAAA,YArLO,wBAqLMC,CArLN;AAsLL,sBAAgDA,CAAC,CAACC,MAAlD;AAAA,UAAQzH,KAAR,aAAQA,KAAR;AAAA,UAAekF,cAAf,aAAeA,cAAf;AAAA,UAA+BhC,YAA/B,aAA+BA,YAA/B;;AAEA,WAAK+C,aAAL,CACE;AACEjG,QAAAA,KAAK,EAALA,KADF;AAEEkF,QAAAA,cAAc,EAAdA,cAFF;AAGEhC,QAAAA,YAAY,EAAZA;AAHF,OADF,EAME,IANF;;AAQA,WAAKoE,KAAL,CAAW,OAAX,EAAoBtH,KAApB;AAED,KAlMM;AAmMP0H,IAAAA,SAnMO;AAoML,2BAA0B,KAAK7G,OAA/B;AAAA,UAAQC,KAAR,kBAAQA,KAAR;AAAA,UAAeC,MAAf,kBAAeA,MAAf;;AAGA,UAAMsF,MAAM,GAAGvF,KAAK,CAACC,MAAM,GAAG,CAAV,CAApB;;AAEA,UAAIsF,MAAJ,EAAY;AACV;AACA,aAAKE,YAAL,CAAkBF,MAAlB;;AACA,aAAKxF,OAAL,CAAaE,MAAb,GAAsB0C,IAAI,CAACY,GAAL,CAAStD,MAAM,GAAG,CAAlB,EAAqB,CAArB,CAAtB;AACD;AACF,KA9MM;AA+MP4G,IAAAA,SA/MO;AAgNL,2BAA0B,KAAK9G,OAA/B;AAAA,UAAQC,KAAR,kBAAQA,KAAR;AAAA,UAAeC,MAAf,kBAAeA,MAAf;;AAGA,UAAMsF,MAAM,GAAGvF,KAAK,CAACC,MAAM,GAAG,CAAV,CAApB;;AAEA,UAAIsF,MAAJ,EAAY;AACV;AACA,aAAKE,YAAL,CAAkBF,MAAlB;;AACA,aAAKxF,OAAL,CAAaE,MAAb,GAAsB0C,IAAI,CAACC,GAAL,CAAS3C,MAAM,GAAG,CAAlB,EAAqBD,KAAK,CAACuB,MAAN,GAAe,CAApC,CAAtB;AACD;AACF,KA1NM;AA2NPuF,IAAAA,aA3NO,yBA2NOJ,CA3NP;;;AA4NL;AACA,UAAQnH,OAAR,GAAgD,IAAhD,CAAQA,OAAR;AAAA,UAAiBE,YAAjB,GAAgD,IAAhD,CAAiBA,YAAjB;AAAA,UAA+BC,YAA/B,GAAgD,IAAhD,CAA+BA,YAA/B;;AAEA,UAAI,KAAKqH,UAAL,CAAgBC,OAApB,EAA6B;AAC3B;AACA,aAAKR,KAAL,CAAW,SAAX,EAAsBE,CAAtB;;AAEA,YAAIA,CAAC,CAACO,gBAAN,EAAwB;AACtB;AACD;AACF;;AAED,UAAIP,CAAC,CAACQ,OAAF,KAAc,CAAd,IAAmB,KAAK5G,gBAAL,CAAsBiB,MAAzC,IAAmD,KAAKnB,gBAA5D,EAA8E;AAC5E,aAAKoD,kBAAL,CAAwBkD,CAAxB;AACAA,QAAAA,CAAC,CAAC/C,cAAF;AACA+C,QAAAA,CAAC,CAACS,eAAF;AACA;AACD;;AACD,UAAIT,CAAC,CAACQ,OAAF,KAAc,EAAlB,EAAsB;AACpB;AACA,YAAI,KAAK5G,gBAAL,CAAsBiB,MAAtB,IAAgC,KAAKnB,gBAAzC,EAA2D;AACzDsG,UAAAA,CAAC,CAAC/C,cAAF;AACA,eAAKvD,gBAAL,GAAwB,KAAxB;AACA;AACD;AACF,OAPD,MAOO,IAAIsG,CAAC,CAACQ,OAAF,KAAc,EAAlB,EAAsB;AAC3B;AACA,YAAI,KAAK5G,gBAAL,CAAsBiB,MAAtB,IAAgC,KAAKnB,gBAAzC,EAA2D;AACzDsG,UAAAA,CAAC,CAAC/C,cAAF;AACA,eAAKtD,iBAAL,GAAyB,CAAC,KAAKA,iBAAL,GAAyB,KAAKA,iBAA9B,GAAkD,KAAKC,gBAAL,CAAsBiB,MAAzE,IAAmF,CAA5G;AACA;AACD;AACF,OAPM,MAOA,IAAImF,CAAC,CAACQ,OAAF,KAAc,EAAlB,EAAsB;AAC3B;AACA,YAAI,KAAK5G,gBAAL,CAAsBiB,MAAtB,IAAgC,KAAKnB,gBAAzC,EAA2D;AACzDsG,UAAAA,CAAC,CAAC/C,cAAF;AACA,eAAKtD,iBAAL,GAAyB,CAAC,KAAKA,iBAAL,GAAyB,CAA1B,IAA+B,KAAKC,gBAAL,CAAsBiB,MAA9E;AACA;AACD;AACF;;AAED,UAAImF,CAAC,CAACQ,OAAF,KAAcnJ,cAAlB,EAAkC;AACV2I,QAAAA,CAAC,CAACC,MAAF,CAAUS,IAAV;AACtB,aAAKZ,KAAL,CAAW,MAAX,EAAmBE,CAAnB;AACD;;AAED,uBAAgDA,CAAC,CAACC,MAAlD;AAAA,UAAQzH,KAAR,cAAQA,KAAR;AAAA,UAAekF,cAAf,cAAeA,cAAf;AAAA,UAA+BhC,YAA/B,cAA+BA,YAA/B;AAEA,UAAMiF,YAAY,GAAG,CAAC5H,YAAY,GAAG,GAAH,GAAS,IAAtB,EAA4B6H,MAA5B,CAAmC/H,OAAnC,CAArB;;AAEA,UAAImH,CAAC,CAACQ,OAAF,KAAcxJ,WAAd,IAA6B,CAACgC,YAA9B,IAA8C,KAAKI,OAAvD,EAAgE;AAC9D;AACA4G,QAAAA,CAAC,CAAC/C,cAAF;;AAEA,YAAI+C,CAAC,CAACa,QAAN,EAAgB;AACd;AACA,cAAMC,gBAAgB,GAAG,KAAKpC,SAAL,CAAelG,KAAf,EAAsBkF,cAAtB,CAAzB;;AACA,cAAMqD,SAAS,GAAGD,gBAAgB,CAACjG,MAAjB,GAA0B,CAA5C;AACA,cAAMmG,OAAO,GAAG,KAAKtC,SAAL,CAAelG,KAAf,EAAsBkD,YAAtB,EAAoCb,MAApC,GAA6C,CAA7D;AACA,cAAMoG,SAAS,GAAGzI,KAAK,CACpByC,KADe,CACT,IADS,EAEfiG,GAFe,CAEX,UAACnF,IAAD,EAAOoF,CAAP;AACH,gBAAIA,CAAC,IAAIJ,SAAL,IAAkBI,CAAC,IAAIH,OAAvB,IAAkCjF,IAAI,CAAC6D,UAAL,CAAgBe,YAAhB,CAAtC,EAAqE;AACnE,qBAAO5E,IAAI,CAACN,SAAL,CAAekF,YAAY,CAAC9F,MAA5B,CAAP;AACD;;AAED,mBAAOkB,IAAP;AACD,WARe,EASfwB,IATe,CASV,IATU,CAAlB;;AAWA,cAAI/E,KAAK,KAAKyI,SAAd,EAAyB;AACvB,gBAAMG,aAAa,GAAGN,gBAAgB,CAACC,SAAD,CAAtC;;AAEA,iBAAKpD,WAAL,CAAiB;AACfnF,cAAAA,KAAK,EAAEyI,SADQ;AAEf;AACA;AACAvD,cAAAA,cAAc,EAAE0D,aAAa,CAACxB,UAAd,CAAyBe,YAAzB,IACZjD,cAAc,GAAGiD,YAAY,CAAC9F,MADlB,GAEZ6C,cANW;AAOf;AACAhC,cAAAA,YAAY,EAAEA,YAAY,IAAIlD,KAAK,CAACqC,MAAN,GAAeoG,SAAS,CAACpG,MAA7B;AARX,aAAjB;AAUD;AACF,SA9BD,MA8BO,IAAI6C,cAAc,KAAKhC,YAAvB,EAAqC;AAC1C;AACA,cAAMoF,iBAAgB,GAAG,KAAKpC,SAAL,CAAelG,KAAf,EAAsBkF,cAAtB,CAAzB;;AACA,cAAMqD,UAAS,GAAGD,iBAAgB,CAACjG,MAAjB,GAA0B,CAA5C;;AACA,cAAMmG,QAAO,GAAG,KAAKtC,SAAL,CAAelG,KAAf,EAAsBkD,YAAtB,EAAoCb,MAApC,GAA6C,CAA7D;;AACA,cAAMuG,cAAa,GAAGN,iBAAgB,CAACC,UAAD,CAAtC;;AAEA,eAAKpD,WAAL,CAAiB;AACfnF,YAAAA,KAAK,EAAEA,KAAK,CACTyC,KADI,CACE,IADF,EAEJiG,GAFI,CAEA,UAACnF,IAAD,EAAOoF,CAAP;AACH,kBAAIA,CAAC,IAAIJ,UAAL,IAAkBI,CAAC,IAAIH,QAA3B,EAAoC;AAClC,uBAAOL,YAAY,GAAG5E,IAAtB;AACD;;AAED,qBAAOA,IAAP;AACD,aARI,EASJwB,IATI,CASC,IATD,CADQ;AAWf;AACA;AACAG,YAAAA,cAAc,EAAE,KAAK/F,IAAL,CAAUyJ,cAAV,IAA2B1D,cAAc,GAAGiD,YAAY,CAAC9F,MAAzD,GAAkE6C,cAbnE;AAcf;AACAhC,YAAAA,YAAY,EAAEA,YAAY,GAAGiF,YAAY,CAAC9F,MAAb,IAAuBmG,QAAO,GAAGD,UAAV,GAAsB,CAA7C;AAfd,WAAjB;AAiBD,SAxBM,MAwBA;AACL,cAAMM,gBAAgB,GAAG3D,cAAc,GAAGiD,YAAY,CAAC9F,MAAvD;;AAEA,eAAK8C,WAAL,CAAiB;AACf;AACAnF,YAAAA,KAAK,EAAEA,KAAK,CAACiD,SAAN,CAAgB,CAAhB,EAAmBiC,cAAnB,IAAqCiD,YAArC,GAAoDnI,KAAK,CAACiD,SAAN,CAAgBC,YAAhB,CAF5C;AAGf;AACAgC,YAAAA,cAAc,EAAE2D,gBAJD;AAKf3F,YAAAA,YAAY,EAAE2F;AALC,WAAjB;AAOD;AACF,OArED,MAqEO,IAAIrB,CAAC,CAACQ,OAAF,KAAcvJ,iBAAlB,EAAqC;AAC1C,YAAMqK,YAAY,GAAG5D,cAAc,KAAKhC,YAAxC;AACA,YAAM6F,eAAe,GAAG/I,KAAK,CAACiD,SAAN,CAAgB,CAAhB,EAAmBiC,cAAnB,CAAxB;;AAEA,YAAI6D,eAAe,CAAC9D,QAAhB,CAAyBkD,YAAzB,KAA0C,CAACW,YAA/C,EAA6D;AAC3D;AACAtB,UAAAA,CAAC,CAAC/C,cAAF;;AAEA,cAAMoE,iBAAgB,GAAG3D,cAAc,GAAGiD,YAAY,CAAC9F,MAAvD;;AAEA,eAAK8C,WAAL,CAAiB;AACf;AACAnF,YAAAA,KAAK,EAAEA,KAAK,CAACiD,SAAN,CAAgB,CAAhB,EAAmBiC,cAAc,GAAGiD,YAAY,CAAC9F,MAAjD,IAA2DrC,KAAK,CAACiD,SAAN,CAAgBC,YAAhB,CAFnD;AAGf;AACAgC,YAAAA,cAAc,EAAE2D,iBAJD;AAKf3F,YAAAA,YAAY,EAAE2F;AALC,WAAjB;AAOD;AACF,OAlBM,MAkBA,IAAIrB,CAAC,CAACQ,OAAF,KAAczJ,aAAlB,EAAiC;AAEtC,YAAI,KAAK6C,gBAAL,CAAsBiB,MAAtB,IAAgC,KAAKnB,gBAAzC,EAA2D;AACzD,eAAKoD,kBAAL,CAAwBkD,CAAxB;AAED,SAHD,MAGO,IAAItC,cAAc,KAAKhC,YAAvB,EAAqC;AAC1C;AACA,cAAMK,IAAI,GAAG,KAAK2C,SAAL,CAAelG,KAAf,EAAsBkF,cAAtB,EAAsC+B,GAAtC,EAAb;;AACA,cAAM+B,OAAO,GAAGzF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAE2D,KAAN,CAAY,MAAZ,CAAhB;;AAEA,cAAI8B,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAtB,EAA2B;AACzBxB,YAAAA,CAAC,CAAC/C,cAAF,GADyB;;AAIzB,gBAAMwE,MAAM,GAAG,OAAOD,OAAO,CAAC,CAAD,CAA7B;;AACA,gBAAMH,kBAAgB,GAAG3D,cAAc,GAAG+D,MAAM,CAAC5G,MAAjD;;AAEA,iBAAK8C,WAAL,CAAiB;AACf;AACAnF,cAAAA,KAAK,EAAEA,KAAK,CAACiD,SAAN,CAAgB,CAAhB,EAAmBiC,cAAnB,IAAqC+D,MAArC,GAA8CjJ,KAAK,CAACiD,SAAN,CAAgBC,YAAhB,CAFtC;AAGf;AACAgC,cAAAA,cAAc,EAAE2D,kBAJD;AAKf3F,cAAAA,YAAY,EAAE2F;AALC,aAAjB;AAOD;AACF;AACF,OA1BM,MA0BA,IAAI/J,aAAa,CAAC0I,CAAC,CAAC0B,GAAH,CAAjB,EAA0B;AAC/B;AACA,YAAIhE,cAAc,KAAKhC,YAAvB,EAAqC;AACnCsE,UAAAA,CAAC,CAAC/C,cAAF;;AAEA,eAAKU,WAAL,CAAiB;AACfnF,YAAAA,KAAK,EACHA,KAAK,CAACiD,SAAN,CAAgB,CAAhB,EAAmBiC,cAAnB,IACAsC,CAAC,CAAC0B,GADF,GAEAlJ,KAAK,CAACiD,SAAN,CAAgBiC,cAAhB,EAAgChC,YAAhC,CAFA,GAGApE,aAAa,CAAC0I,CAAC,CAAC0B,GAAH,CAHb,GAIAlJ,KAAK,CAACiD,SAAN,CAAgBC,YAAhB,CANa;AAOf;AACAgC,YAAAA,cAAc,EAAEA,cAAc,GAAG,CARlB;AASfhC,YAAAA,YAAY,EAAEA,YAAY,GAAG;AATd,WAAjB;AAWD;AACF,OAjBM,MAiBA,IACL,CAAC5D,SAAS;AAENkI,MAAAA,CAAC,CAAC2B,OAAF,IAAa3B,CAAC,CAACQ,OAAF,KAAcrJ,SAFrB;AAIN6I,MAAAA,CAAC,CAAC4B,OAAF,IAAa5B,CAAC,CAACQ,OAAF,KAAcrJ,SAJ/B,KAKA,CAAC6I,CAAC,CAACa,QALH,IAMA,CAACb,CAAC,CAAC6B,MAPE,EAQL;AACA7B,QAAAA,CAAC,CAAC/C,cAAF;;AAEA,aAAKiD,SAAL;AACD,OAZM,MAYA,IACL,CAACpI,SAAS;AAENkI,MAAAA,CAAC,CAAC2B,OAAF,IAAa3B,CAAC,CAACQ,OAAF,KAAcrJ,SAA3B,IAAwC6I,CAAC,CAACa,QAFpC,GAGNpJ,SAAS;AAETuI,MAAAA,CAAC,CAAC4B,OAAF,IAAa5B,CAAC,CAACQ,OAAF,KAActJ,SAFlB;AAIT8I,MAAAA,CAAC,CAAC4B,OAAF,IAAa5B,CAAC,CAACQ,OAAF,KAAcrJ,SAA3B,IAAwC6I,CAAC,CAACa,QAP9C,KAQA,CAACb,CAAC,CAAC6B,MATE,EAUL;AACA7B,QAAAA,CAAC,CAAC/C,cAAF;;AAEA,aAAKkD,SAAL;AACD,OAdM,MAcA,IAAIH,CAAC,CAACQ,OAAF,KAAcpJ,SAAd,IAA2B4I,CAAC,CAAC4B,OAA7B,KAAyC9J,SAAS,GAAGkI,CAAC,CAACa,QAAL,GAAgB,IAAlE,CAAJ,EAA6E;AAClFb,QAAAA,CAAC,CAAC/C,cAAF,GADkF;;AAIlF,aAAK7D,OAAL,GAAe,CAAC,KAAKA,OAArB;AACD;;AACD,UAAI4G,CAAC,CAACQ,OAAF,KAAc,EAAd,IAAoBR,CAAC,CAACQ,OAAF,KAAc,CAAtC,EAAyC;AACvC3C,QAAAA,UAAU,CAAC;AACT,UAAA,MAAI,CAACpB,sBAAL;AACD,SAFS,EAEP,CAFO,CAAV;AAGD;AACF;AArbM,GA9H2B;AAqjBpCqF,EAAAA,MArjBoC,kBAqjB7BC,CArjB6B;;;AAsjBlC,QAAMC,yBAAyB,GAAGD,CAAC,CACjC,KADiC,EAEjC;AACEE,MAAAA,KAAK,EAAE;AACL,iBAAO,+BADF;AAEL3D,QAAAA,KAAK,EAAE;AAFF;AADT,KAFiC,EAQjC,KARiC,CAAnC;AAUA,QAAMnG,WAAW,GAAG4J,CAAC,CACnB,KADmB,EAEnB;AACEG,MAAAA,WAAW,EAAE,4BADf;AAEE5D,MAAAA,KAAK,EAAE;AACL,sBAAc,KAAK9E;AADd,OAFT;AAKEyI,MAAAA,KAAK,EAAE;AACL,uBAAe;AADV;AALT,KAFmB,EAWnB,CACED,yBADF,EAEEG,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,KAAKpH,gBAAN,CAAL,CAA6BsH,IAA7B,EAAX,EAAgDnB,GAAhD,CAAoD,UAACoB,CAAD,EAAIC,KAAJ;AAClD,aAAOR,CAAC,CAAC,KAAD,EAAQ;AAAEE,QAAAA,KAAK,EAAE;AAAE,mBAAO;AAAT;AAAT,OAAR,OAA4E,EAAEM,KAA9E,CAAR;AACD,KAFD,CAFF,CAXmB,CAArB;AAmBA,QAAMC,gBAAgB,GAAI,KAAK9I,gBAAL,IAAyB,KAAKE,gBAAL,CAAsBiB,MAAhD,GAA0DkH,CAAC,CAClF,IADkF,EAElF;AACEG,MAAAA,WAAW,EAAE,4BADf;AAEE5D,MAAAA,KAAK,EAAE;AAACmE,QAAAA,IAAI,EAAE,KAAKvH,YAAL,CAAkB,CAAlB,IAAuB,IAA9B;AAAoCwH,QAAAA,GAAG,EAAE,KAAKxH,YAAL,CAAkB,CAAlB,IAAuB;AAAhE;AAFT,KAFkF,EAMlF,KAAKtB,gBAAL,CAAsBsH,GAAtB,CAA0B,UAAC/H,IAAD,EAA0BgI,CAA1B;AACxB,aAAOY,CAAC,CAAC,IAAD,EAAO;AACbL,QAAAA,GAAG,EAAEvI,IAAI,CAACgC,IADG;AAEb,iBAAO;AAACwH,UAAAA,QAAQ,EAAExB,CAAC,IAAI,MAAI,CAACxH;AAArB,SAFM;AAGbiJ,QAAAA,EAAE,EAAE;AACFC,UAAAA,SAAS,EAAE,mBAACC,MAAD;AACT,YAAA,MAAI,CAAChG,kBAAL,CAAwBgG,MAAxB,EAAgC3B,CAAhC;AACD;AAHC;AAHS,OAAP,EAQL,CAAChI,IAAI,CAAC4J,KAAL,IAAc5J,IAAI,CAACgC,IAApB,CARK,CAAR;AASD,KAVD,CANkF,CAA3D,GAiBrB+B,SAjBJ;AAmBA,QAAM5B,QAAQ,GAAGyG,CAAC,CAAC,UAAD,EAAa;AAC7BiB,MAAAA,GAAG,EAAE,UADwB;AAE7BJ,MAAAA,EAAE,EAAE;AACFxH,QAAAA,KAAK,EAAE,KAAK2E,YADV;AAEFO,QAAAA,OAAO,EAAE,KAAKF,aAFZ;AAGF6C,QAAAA,KAAK,EAAE,eAACH,MAAD;AACL,UAAA,MAAI,CAACpJ,gBAAL,GAAwB,KAAxB;;AACA,UAAA,MAAI,CAACoG,KAAL,CAAW,OAAX,EAAoBgD,MAApB;AACD,SANC;AAOFI,QAAAA,KAAK,EAAE,eAACJ,MAAD;AACL,UAAA,MAAI,CAAChD,KAAL,CAAW,OAAX,EAAoBgD,MAApB;AACD,SATC;AAUFK,QAAAA,KAAK,EAAE,eAACL,MAAD;AACL,UAAA,MAAI,CAAClE,oBAAL;;AACA,UAAA,MAAI,CAACkB,KAAL,CAAW,OAAX,EAAoBgD,MAApB;AACD,SAbC;AAcFpC,QAAAA,IAAI,EAAE,cAACoC,MAAD;AACJ,UAAA,MAAI,CAACpJ,gBAAL,GAAwB,KAAxB;;AACA,UAAA,MAAI,CAACoG,KAAL,CAAW,MAAX,EAAmBgD,MAAnB;AACD;AAjBC,OAFyB;AAqB7BZ,MAAAA,WAAW,EAAE,wBArBgB;AAsB7B,eAAO;AACL,yCAAiC,KAAKtH;AADjC,OAtBsB;AAyB7BqH,MAAAA,KAAK,EAAE;AACLmB,QAAAA,UAAU,EAAE,OADP;AAELC,QAAAA,cAAc,EAAE,KAFX;AAGLnK,QAAAA,YAAY,EAAE,KAHT;AAILoK,QAAAA,WAAW,EAAE,KAJR;AAKL,sBAAc,OALT;AAMLrK,QAAAA,WAAW,EAAE,KAAKA,WANb;AAOL,uBAAe,UAPV;AAQLV,QAAAA,QAAQ,EAAE,KAAKA;AARV,OAzBsB;AAmC7BgL,MAAAA,QAAQ,EAAE;AACR/K,QAAAA,KAAK,EAAE,KAAKiB;AADJ;AAnCmB,KAAb,CAAlB;AAuCA,QAAM+J,OAAO,GAAGzB,CAAC,CAAC,KAAD,EAAQ;AACvBiB,MAAAA,GAAG,EAAE,KADkB;AAEvBd,MAAAA,WAAW,EAAE,sBAFU;AAGvBD,MAAAA,KAAK,EAAE;AACL,uBAAe;AADV,OAHgB;AAMvBsB,MAAAA,QAAQ,EAAE;AACRE,QAAAA,SAAS,EAAE,KAAKxJ;AADR;AANa,KAAR,CAAjB;AAUA,QAAMyJ,eAAe,GAAG3B,CAAC,CAAC,KAAD,EAAQ;AAAEG,MAAAA,WAAW,EAAE;AAAf,KAAR,EAAoD,CAAC5G,QAAD,EAAWkI,OAAX,CAApD,CAAzB;AACA,QAAMjI,OAAO,GAAGwG,CAAC,CAAC,KAAD,EAAQ;AAAEG,MAAAA,WAAW,EAAE,sBAAf;AAAuCc,MAAAA,GAAG,EAAE;AAA5C,KAAR,EAAiE,CAAC,KAAK7K,WAAL,IAAoBA,WAArB,EAAkCuL,eAAlC,CAAjE,CAAjB;AACA,WAAO3B,CAAC,CAAC,KAAD,EAAQ;AAAEG,MAAAA,WAAW,EAAE;AAAf,KAAR,EAAmD,CAAC3G,OAAD,EAAUiH,gBAAV,CAAnD,CAAR;AACD;AA1pBmC,CAAX;;;;"}